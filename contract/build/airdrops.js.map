{"version":3,"file":"airdrops.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/promise.js","../airdrops.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, encode, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageReadRaw(encode(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWriteRaw(encode(storageKey), storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, str, bytes, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = str(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageReadRaw(bytes(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemoveRaw(bytes(lastKey)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemoveRaw(bytes(key));\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, encode, decode, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this._keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this._keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this._keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this._keys.push(key);\n            this.values.set(key, [decode(serialized), newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [decode(serialized), oldIndex]);\n        return getValueWithOptions(encode(oldValue), options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this._keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this._keys.isEmpty() && index !== this._keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this._keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this._keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this._keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map._keys = new Vector(`${data.prefix}u`);\n        map._keys.length = data._keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n    keys({ start, limit }) {\n        const ret = [];\n        if (start === undefined) {\n            start = 0;\n        }\n        if (limit == undefined) {\n            limit = this.length - start;\n        }\n        for (let i = start; i < start + limit; i++) {\n            ret.push(this._keys.get(i));\n        }\n        return ret;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap._keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [\n                key.value,\n                getValueWithOptions(encode(valueAndIndex[0]), this.options),\n            ],\n        };\n    }\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import { assert } from \"./utils\";\nimport * as near from \"./api\";\n/**\n * A promise action which can be executed on the NEAR blockchain.\n */\nexport class PromiseAction {\n}\n/**\n * A create account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class CreateAccount extends PromiseAction {\n    add(promiseIndex) {\n        near.promiseBatchActionCreateAccount(promiseIndex);\n    }\n}\n/**\n * A deploy contract promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeployContract extends PromiseAction {\n    /**\n     * @param code - The code of the contract to be deployed.\n     */\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeployContract(promiseIndex, this.code);\n    }\n}\n/**\n * A function call promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCall extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCall(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call weight promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeight extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeight(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A function call weight raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeightRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeightRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A transfer promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Transfer extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    constructor(amount) {\n        super();\n        this.amount = amount;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionTransfer(promiseIndex, this.amount);\n    }\n}\n/**\n * A stake promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Stake extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    constructor(amount, publicKey) {\n        super();\n        this.amount = amount;\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionStake(promiseIndex, this.amount, this.publicKey.data);\n    }\n}\n/**\n * A add full access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddFullAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFullAccess(promiseIndex, this.publicKey.data, this.nonce);\n    }\n}\n/**\n * A add access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the receiver.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, allowance, receiverId, functionNames, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.allowance = allowance;\n        this.receiverId = receiverId;\n        this.functionNames = functionNames;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFunctionCall(promiseIndex, this.publicKey.data, this.nonce, this.allowance, this.receiverId, this.functionNames);\n    }\n}\n/**\n * A delete key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to delete from the account.\n     */\n    constructor(publicKey) {\n        super();\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteKey(promiseIndex, this.publicKey.data);\n    }\n}\n/**\n * A delete account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteAccount extends PromiseAction {\n    /**\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    constructor(beneficiaryId) {\n        super();\n        this.beneficiaryId = beneficiaryId;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteAccount(promiseIndex, this.beneficiaryId);\n    }\n}\nclass PromiseSingle {\n    constructor(accountId, actions, after, promiseIndex) {\n        this.accountId = accountId;\n        this.actions = actions;\n        this.after = after;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const promiseIndex = this.after\n            ? near.promiseBatchThen(this.after.constructRecursively(), this.accountId)\n            : near.promiseBatchCreate(this.accountId);\n        this.actions.forEach((action) => action.add(promiseIndex));\n        this.promiseIndex = promiseIndex;\n        return promiseIndex;\n    }\n}\nexport class PromiseJoint {\n    constructor(promiseA, promiseB, promiseIndex) {\n        this.promiseA = promiseA;\n        this.promiseB = promiseB;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const result = near.promiseAnd(this.promiseA.constructRecursively(), this.promiseB.constructRecursively());\n        this.promiseIndex = result;\n        return result;\n    }\n}\n/**\n * A high level class to construct and work with NEAR promises.\n */\nexport class NearPromise {\n    /**\n     * @param subtype - The subtype of the promise.\n     * @param shouldReturn - Whether the promise should return.\n     */\n    constructor(subtype, shouldReturn) {\n        this.subtype = subtype;\n        this.shouldReturn = shouldReturn;\n    }\n    /**\n     * Creates a new promise to the provided account ID.\n     *\n     * @param accountId - The account ID on which to call the promise.\n     */\n    static new(accountId) {\n        const subtype = new PromiseSingle(accountId, [], null, null);\n        return new NearPromise(subtype, false);\n    }\n    addAction(action) {\n        if (this.subtype instanceof PromiseJoint) {\n            throw new Error(\"Cannot add action to a joint promise.\");\n        }\n        this.subtype.actions.push(action);\n        return this;\n    }\n    /**\n     * Creates a create account promise action and adds it to the current promise.\n     */\n    createAccount() {\n        return this.addAction(new CreateAccount());\n    }\n    /**\n     * Creates a deploy contract promise action and adds it to the current promise.\n     *\n     * @param code - The code of the contract to be deployed.\n     */\n    deployContract(code) {\n        return this.addAction(new DeployContract(code));\n    }\n    /**\n     * Creates a function call promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCall(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCall(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCallRaw(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCallRaw(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call weight promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeight(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeight(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a function call weight raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeightRaw(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeightRaw(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a transfer promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    transfer(amount) {\n        return this.addAction(new Transfer(amount));\n    }\n    /**\n     * Creates a stake promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    stake(amount, publicKey) {\n        return this.addAction(new Stake(amount, publicKey));\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     */\n    addFullAccessKey(publicKey) {\n        return this.addFullAccessKeyWithNonce(publicKey, 0n);\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    addFullAccessKeyWithNonce(publicKey, nonce) {\n        return this.addAction(new AddFullAccessKey(publicKey, nonce));\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the receiver.\n     * @param functionNames - The names of funcitons to authorize.\n     */\n    addAccessKey(publicKey, allowance, receiverId, functionNames) {\n        return this.addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, 0n);\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the receiver.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, nonce) {\n        return this.addAction(new AddAccessKey(publicKey, allowance, receiverId, functionNames, nonce));\n    }\n    /**\n     * Creates a delete key promise action and adds it to the current promise.\n     *\n     * @param publicKey - The public key to delete from the account.\n     */\n    deleteKey(publicKey) {\n        return this.addAction(new DeleteKey(publicKey));\n    }\n    /**\n     * Creates a delete account promise action and adds it to the current promise.\n     *\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    deleteAccount(beneficiaryId) {\n        return this.addAction(new DeleteAccount(beneficiaryId));\n    }\n    /**\n     * Joins the provided promise with the current promise, making the current promise a joint promise subtype.\n     *\n     * @param other - The promise to join with the current promise.\n     */\n    and(other) {\n        const subtype = new PromiseJoint(this, other, null);\n        return new NearPromise(subtype, false);\n    }\n    /**\n     * Adds a callback to the current promise.\n     *\n     * @param other - The promise to be executed as the promise.\n     */\n    then(other) {\n        assert(other.subtype instanceof PromiseSingle, \"Cannot callback joint promise.\");\n        assert(other.subtype.after === null, \"Cannot callback promise which is already scheduled after another\");\n        other.subtype.after = this;\n        return other;\n    }\n    /**\n     * Sets the shouldReturn field to true.\n     */\n    asReturn() {\n        this.shouldReturn = true;\n        return this;\n    }\n    /**\n     * Recursively goes through the current promise to get the promise index.\n     */\n    constructRecursively() {\n        const result = this.subtype.constructRecursively();\n        if (this.shouldReturn) {\n            near.promiseReturn(result);\n        }\n        return result;\n    }\n    /**\n     * Called by NearBindgen, when return object is a NearPromise instance.\n     */\n    onReturn() {\n        this.asReturn().constructRecursively();\n    }\n}\n","import { NearBindgen, initialize, call, near, bytes, NearPromise, view, Vector, UnorderedMap, assert } from \"near-sdk-js\";\nimport { AccountId } from \"near-sdk-js/lib/types\";\nimport { json } from \"stream/consumers\";\n// assert(near.blockTimestamp === token.owner_id, \"Predecessor must be the token owner\");\n\nconst FIVE_TGAS = BigInt(\"50000000000000\");\nconst NO_DEPOSIT = BigInt(0);\nconst NO_ARGS = JSON.stringify({});\nconst GAS_FOR_NFT_TRANSFER = 15_000_000_000_000;\ninterface Init {\n    tokenAddress: AccountId;\n    nftAddress: AccountId;\n    from: number;\n    limit: number;\n    startAt: bigint;\n    endAt: bigint;\n    blockList: string[];\n    owner: AccountId[];\n}\ninterface Timepiece {\n    activated: boolean,\n    startAt: bigint;\n    endAt: bigint;\n}\n\ninterface NFTOwnership {\n    owner: AccountId;\n    claimed: boolean;\n}\n\n@NearBindgen({})\nclass airdropContract {\n    controller: UnorderedMap<boolean> = new UnorderedMap<boolean>('controller-map');\n    tokenAddress: AccountId = \"\";\n    nftAddress: AccountId = \"\";\n    balance: string = \"0\";\n    from: number = 0;\n    reward: string = \"\";\n    limit:bigint = 1n;\n    rewarded:bigint = 0n;\n    startAt: bigint = near.blockTimestamp();\n    endAt: bigint = near.blockTimestamp();\n    blockList: Vector<string> = new Vector<string>('banned-nfts');\n    claimed: UnorderedMap<boolean> = new UnorderedMap<boolean>('claimed-nfts');\n    nftOwner: UnorderedMap<NFTOwnership> = new UnorderedMap<NFTOwnership>('NFT-owner');\n\n\n\n    @initialize({})\n    init({ owner, tokenAddress, nftAddress, blockList }: Init) {\n        owner.forEach(id => this.controller.set(id, true));\n        this.tokenAddress = tokenAddress;\n        this.nftAddress = nftAddress;\n\n        blockList.forEach(id => this.blockList.push(id))\n    }\n    @call({})\n    startAirdrop({ start, end, amount,limit }: { start: bigint, end: bigint,amount:bigint,limit:bigint }): void {\n        this.notAllowed();\n        this.startAt = start;\n        this.endAt = end;\n        this.limit = limit;\n        this.reward = (amount / limit).toString();\n    }\n    @call({ privateFunction: true })\n    query_balance_callback(): string {\n        let { result, success } = promiseResult();\n        if (success) {\n            near.log(result)\n            this.balance = result.substring(1, result.length - 1);;\n            return result.substring(1, result.length - 1);\n        } else {\n            near.log(\"Promise failed...\")\n            return \"\";\n        }\n    }\n    @view({})\n    get_balance(): string {\n        return this.balance;\n    }\n    @call({})\n    set_timer({ start, end }: { start: bigint, end: bigint }): void {\n        this.notAllowed();\n        this.startAt = start;\n        this.endAt = end;\n    }\n\n    @view({})\n    Timer(): Timepiece {\n        let started = false;\n        if (near.blockTimestamp() > this.startAt) {\n            started = true;\n        }\n        if (near.blockTimestamp() > this.endAt) {\n            started = false;\n        }\n        return { activated: started, startAt: this.startAt, endAt: this.endAt }\n\n    }\n    @view({})\n    status({ tokenId }: { tokenId: string }): NFTOwnership | null {\n        return this.nftOwner.get(tokenId)\n    }\n    @call({ payableFunction: true })\n    transfer_tokens({ tokenId }: { tokenId: string, receiverId: AccountId, amount: string }): void {\n        const nft = this.nftOwner.get(tokenId);\n        if (nft?.owner === near.signerAccountId() && nft?.claimed === false && this.rewarded <= this.limit) {\n            const promise = near.promiseBatchCreate(this.tokenAddress)\n            near.promiseBatchActionFunctionCall(promise, \"ft_transfer\", JSON.stringify({\n                receiver_id: nft?.owner,\n                amount: this.reward\n            }), 1, GAS_FOR_NFT_TRANSFER)\n            this.nftOwner.set(tokenId, { owner: nft.owner, claimed: true });\n            this.rewarded = this.rewarded + 1n;\n            return near.promiseReturn(promise);\n        }\n    }\n    @call({ payableFunction: true })\n    withdraw({ receiverId, amount }: { receiverId: AccountId, amount: string }): void {\n        this.notAllowed();\n        const promise = near.promiseBatchCreate(this.tokenAddress)\n        near.promiseBatchActionFunctionCall(promise, \"ft_transfer\", JSON.stringify({\n            receiver_id: receiverId,\n            amount: amount\n        }), 1, GAS_FOR_NFT_TRANSFER)\n        return near.promiseReturn(promise);\n    }\n    @call({ privateFunction: true })\n    transfer_tokens_callback(): boolean {\n        let { result, success } = promiseResult()\n        near.log(result)\n        if (success) {\n            near.log(`Success!`)\n            return true\n        } else {\n            near.log(\"Promise failed...\")\n            return false\n        }\n    }\n    @call({})\n    query_nft_totalSupply(): void {\n        const promise = NearPromise.new(this.nftAddress)\n            .functionCall(\"nft_total_supply\", \"\", NO_DEPOSIT, FIVE_TGAS)\n            .then(NearPromise.new(near.currentAccountId())\n                .functionCall(\"nft_total_supply_callback\", NO_ARGS, NO_DEPOSIT, FIVE_TGAS))\n        return promise.onReturn();\n    }\n    @call({ privateFunction: true })\n    nft_total_supply_callback(): number|unknown {\n        let { result, success } = promiseResult()\n        if (success) {\n            near.log(result as any * 10)\n            return result as unknown\n        } else {\n            near.log(\"Promise failed...\")\n            return 0;\n        }\n    }\n    @call({})\n    query_nft_token({ tokenId }: { tokenId: AccountId }): void {\n        const promise = NearPromise.new(this.nftAddress)\n            .functionCall(\"nft_token\", JSON.stringify({ token_id: tokenId }), NO_DEPOSIT, FIVE_TGAS)\n            .then(NearPromise.new(near.currentAccountId())\n                .functionCall(\"query_query_nft_token_callback\", NO_ARGS, NO_DEPOSIT, FIVE_TGAS))\n        return promise.onReturn();\n    }\n\n    @call({ privateFunction: true })\n    query_query_nft_token_callback(): string {\n        let { result, success } = promiseResult();\n        if (success) {\n            let json = JSON.parse(result)\n            this.nftOwner.set(json.token_id, { owner: json.owner_id, claimed: false })\n            return json\n        } else {\n            near.log(\"Promise failed...\")\n            return \"\";\n        }\n    }\n\n    notAllowed(): void {\n        const allowed = this.controller.get(near.signerAccountId());\n        if (allowed !== true) {\n            throw new Error(`Not allow to change time`);\n        }\n    }\n}\n\nfunction promiseResult(): { result: string, success: boolean } {\n    let result, success;\n    const data: any = 0;\n    try { result = near.promiseResult(data); success = true }\n    catch { result = undefined; success = false }\n\n    return { result, success }\n}\n\n"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","assert","expression","message","Error","getValueWithOptions","value","options","deserializer","deserialize","defaultValue","deserialized","undefined","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","encode","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","bytes","s","env","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","utf8_string_to_uint8array","uint8array_to_utf8_string","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","log","params","reduce","accumulated","parameter","index","param","stringified","signerAccountId","signer_account_id","read_register","predecessorAccountId","predecessor_account_id","currentAccountId","current_account_id","blockTimestamp","block_timestamp","attachedDeposit","attached_deposit","storageReadRaw","returnValue","storage_read","storageHasKeyRaw","storage_has_key","storageHasKey","storageGetEvictedRaw","storageWriteRaw","storage_write","storageRemoveRaw","storage_remove","storageRemove","inputRaw","input","promiseAnd","promiseIndexes","promise_and","promiseBatchCreate","accountId","promise_batch_create","promiseBatchThen","promiseIndex","promise_batch_then","promiseBatchActionCreateAccount","promise_batch_action_create_account","promiseBatchActionDeployContract","code","promise_batch_action_deploy_contract","promiseBatchActionFunctionCallRaw","methodName","args","amount","gas","promise_batch_action_function_call","promiseBatchActionFunctionCall","promiseBatchActionTransfer","promise_batch_action_transfer","promiseBatchActionStake","publicKey","promise_batch_action_stake","promiseBatchActionAddKeyWithFullAccess","nonce","promise_batch_action_add_key_with_full_access","promiseBatchActionAddKeyWithFunctionCall","allowance","receiverId","methodNames","promise_batch_action_add_key_with_function_call","promiseBatchActionDeleteKey","promise_batch_action_delete_key","promiseBatchActionDeleteAccount","beneficiaryId","promise_batch_action_delete_account","promiseBatchActionFunctionCallWeightRaw","weight","promise_batch_action_function_call_weight","promiseBatchActionFunctionCallWeight","promiseResultRaw","status","promise_result","Number","Successful","Failed","NotReady","promiseResult","promiseReturn","promise_return","LookupMap","constructor","keyPrefix","containsKey","storageKey","near","get","remove","set","newValue","storageValue","extend","keyValuePairs","reconstruct","data","indexToKey","prefix","Uint32Array","array","Uint8Array","buffer","Vector","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","done","UnorderedMap","_keys","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","map","start","limit","ret","i","unorderedMap","initialize","_empty","_target","_key","_descriptor","view","call","privateFunction","payableFunction","descriptor","originalMethod","apply","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","_requireInit","PromiseAction","CreateAccount","add","DeployContract","FunctionCall","functionName","FunctionCallRaw","FunctionCallWeight","FunctionCallWeightRaw","Transfer","Stake","AddFullAccessKey","AddAccessKey","functionNames","DeleteKey","DeleteAccount","PromiseSingle","actions","after","constructRecursively","forEach","action","PromiseJoint","promiseA","promiseB","result","NearPromise","subtype","shouldReturn","new","addAction","createAccount","deployContract","functionCall","functionCallRaw","functionCallWeight","functionCallWeightRaw","transfer","stake","addFullAccessKey","addFullAccessKeyWithNonce","addAccessKey","addAccessKeyWithNonce","deleteKey","deleteAccount","and","other","then","asReturn","onReturn","FIVE_TGAS","NO_DEPOSIT","NO_ARGS","GAS_FOR_NFT_TRANSFER","airdropContract","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_class","_class2","controller","tokenAddress","nftAddress","balance","from","reward","rewarded","startAt","endAt","blockList","claimed","nftOwner","init","owner","id","startAirdrop","end","notAllowed","query_balance_callback","success","substring","get_balance","set_timer","Timer","started","activated","tokenId","transfer_tokens","nft","promise","receiver_id","withdraw","transfer_tokens_callback","query_nft_totalSupply","nft_total_supply_callback","query_nft_token","token_id","query_query_nft_token_callback","json","owner_id","allowed","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","name","value_return"],"mappings":"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"}